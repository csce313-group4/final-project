{"version":3,"sources":["ImagePreview/index.js","App.js","serviceWorker.js","index.js"],"names":["ImagePreview","dataUri","classNameFullscreen","isFullscreen","className","src","App","props","context","state","loading","emotions","age","loadSong","videoId","onSelectImage","bind","onTakePhotoAnimationDone","this","setState","style","display","justifyContent","alignItems","height","sizeUnit","size","color","YouTube","opts","width","playerVars","autoplay","frameborder","Navbar","bg","variant","sticky","Button","onClick","React","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kXAoBeA,G,MAfa,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QACzBC,EADqD,EAAnBC,aACG,gCAAkC,GAE3E,OACE,yBAAKC,UAAW,sBAAwBF,GACtC,yBAAKG,IAAKJ,O,gBCCVK,E,YACF,WAAYC,EAAMC,GAAU,IAAD,8BACzB,4CAAMD,EAAMC,KACPC,MAAQ,CACXR,QAAS,KACTS,SAAS,EACTC,SAAU,EAAKJ,MAAMI,SACrBC,IAAK,GACLC,UAAU,EACVC,QAAS,eAGT,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,yBAA2B,EAAKA,yBAAyBD,KAA9B,gBAZT,E,sFAgBDf,GAC1BiB,KAAKC,SAAS,CAAElB,c,sCAMViB,KAAKC,SAAS,CACVN,UAAU,M,+BAehB,OAAGK,KAAKT,MAAMC,QACF,yBAAKU,MAAO,CAACC,QAAS,OAASC,eAAe,SAAUC,WAAW,SAAUC,OAAQ,UACjF,kBAAC,IAAD,CAAYC,SAAU,KAAMC,KAAM,IAAKC,MAAO,UAAYjB,QAASQ,KAAKT,MAAMC,WAGtFQ,KAAKT,MAAMI,SAEb,yBAAKO,MAAO,CAACC,QAAS,OAASC,eAAe,SAAUC,WAAW,SAAUC,OAAQ,UACjF,kBAACI,EAAA,EAAD,CACEd,QAAQ,cACRe,KAlBC,CACXL,OAAQ,MACRM,MAAO,MACPC,WAAY,CACVC,SAAU,EACRC,YAAa,OAoBX,yBAAK7B,UAAU,OAENc,KAAKT,MAAMR,QACN,kBAAC,EAAD,CAAcA,QAASiB,KAAKT,MAAMR,QAASE,cAAc,IACzD,kBAAC,IAAD,CAAQc,yBAA4BC,KAAKD,2BAEvC,6BAChB,kBAACiB,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,OAC9B,kBAACC,EAAA,EAAD,CAAQF,QAAQ,UAAUG,QAASrB,KAAKH,eAAxC,6B,GAjERyB,IAAMC,WA2EpBnC,EAAIoC,aAAe,CACb,SAAa,CACf,CACE,WAAc,SACd,MAAS,SAEX,CACE,WAAc,SACd,MAAS,WAEX,CACE,WAAc,SACd,MAAS,WAEX,CACE,WAAc,OACd,MAAS,OAEX,CACE,WAAc,QACd,MAAS,QAEX,CACE,WAAc,MACd,MAAS,SAEX,CACE,WAAc,MACd,MAAS,cAIJpC,QC1GKqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.def8ee90.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles/imagePreview.css';\n\nexport const ImagePreview = ({ dataUri, isFullscreen }) => {\n  let classNameFullscreen = isFullscreen ? 'demo-image-preview-fullscreen' : '';\n\n  return (\n    <div className={'demo-image-preview ' + classNameFullscreen}>\n      <img src={dataUri} />\n    </div>\n  );\n};\n\nImagePreview.propTypes = {\n  dataUri: PropTypes.string,\n  isFullscreen: PropTypes.bool\n};\n\nexport default ImagePreview;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Camera from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\nimport YouTube from 'react-youtube';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport ImagePreview from './ImagePreview';\nimport Button from 'react-bootstrap/Button';\nimport Navbar from 'react-bootstrap/Navbar';\n\nclass App extends React.Component {\n    constructor(props,context) {\n      super(props,context);\n      this.state = {\n        dataUri: null,\n        loading: false,\n        emotions: this.props.emotions,\n        age: 20,\n        loadSong: false,\n        videoId: \"dQw4w9WgXcQ\",\n      };\n\n        this.onSelectImage = this.onSelectImage.bind(this);\n        this.onTakePhotoAnimationDone = this.onTakePhotoAnimationDone.bind(this);\n  }\n\n\n    onTakePhotoAnimationDone (dataUri) {\n    this.setState({ dataUri });\n  }\n\n      onSelectImage () {\n        //this.setState({loading: true});\n        // Analzye & make calls\n          this.setState({\n              loadSong: true\n          } );\n      }\n\n\n      render()\n      {\n        const opts = {\n          height: '390',\n          width: '640',\n          playerVars: { // https://developers.google.com/youtube/player_parameters\n            autoplay: 1,\n              frameborder: 0\n          }\n        };\n        if(this.state.loading){\n            return (<div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n                        <ClipLoader sizeUnit={\"px\"} size={100} color={'#36d7b7'}  loading={this.state.loading} />\n            </div>)\n        }\n        else if(this.state.loadSong){\n          return(\n              <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n                  <YouTube\n                    videoId=\"dQw4w9WgXcQ\"\n                    opts={opts}\n                    />\n              </div>)\n        }\n        else {\n            return (\n\n                <div className=\"App\">\n                    {\n                        (this.state.dataUri)\n                            ? <ImagePreview dataUri={this.state.dataUri} isFullscreen={false}/>\n                            : <Camera onTakePhotoAnimationDone = {this.onTakePhotoAnimationDone} />\n                    }\n                                <div>\n                <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n                          <Button variant=\"primary\" onClick={this.onSelectImage}>Get Recommendation</Button>\n                      </Navbar>\n                                </div>\n\n                </div>\n            );\n        }\n      }\n    }\n\n    App.defaultProps = {\n          \"emotions\": ([\n        {\n          \"confidence\": 0.9386989,\n          \"label\": \"Happy\"\n        },\n        {\n          \"confidence\": 0.0483937,\n          \"label\": \"Neutral\"\n        },\n        {\n          \"confidence\": 0.0120008,\n          \"label\": \"Disgust\"\n        },\n        {\n          \"confidence\": 0.000406,\n          \"label\": \"Sad\"\n        },\n        {\n          \"confidence\": 0.0003461,\n          \"label\": \"Fear\"\n        },\n        {\n          \"confidence\": 0.00015,\n          \"label\": \"Angry\"\n        },\n        {\n          \"confidence\": 0.0000046,\n          \"label\": \"Surprise\"\n        }\n      ])\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}