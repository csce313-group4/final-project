{"version":3,"sources":["App.js","ImagePreview/index.js","serviceWorker.js","index.js"],"names":["Flickr","require","App","props","context","state","backgroundImage","azureKey","dataUri","loading","emotion","isHappy","age","loadSong","opts","height","width","playerVars","autoplay","list","playsinline","cc_load_policy","modestbranding","index","controls","onSelectImage","bind","onTakePhotoAnimationDone","getAgeAndEmotion","getRecs","getMusicYearFromAge","isThisEmotionHappy","getPlaylistFromParams","getBackgroundImage","this","setState","Promise","all","then","catch","err","console","log","resolve","reject","azureSubscriptionKey","buff","Buffer","replace","fetch","method","body","headers","res","json","jsonData","length","faceAttributes","tmpMusicYear","Date","getFullYear","leastSignificantDigitOfMusicYear","musicYear","happyConf","happiness","sadConf","sadness","flickr","text","photos","search","safe_search","license","content_type","extras","Math","floor","random","error","instPopover","id","Title","as","Content","bg","variant","Brand","href","alt","src","className","style","backgroundSize","justifyContent","alignItems","display","any","trigger","placement","overlay","active","spinner","sizeUnit","size","color","isFullscreen","React","Component","defaultProps","ImagePreview","classNameFullscreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1335068.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Button from 'react-bootstrap/Button';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Camera from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\nimport YouTube from 'react-youtube';\nimport 'react-youtube-playlist/dist/styles.scss'\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport LoadingOverlay from 'react-loading-overlay'\nimport ImagePreview from './ImagePreview';\nvar Flickr = require('flickr-sdk');\n\n\nclass App extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            backgroundImage: '',\n            azureKey: '1de04c834f214ba9b444ab120cb2ab1a',\n            dataUri: null,\n            loading: false,\n            emotion: this.props.emotion,\n            isHappy: true,\n            age: 20,\n            loadSong: false,\n            opts: {\n            height: '800px', width: '960px',\n            playerVars: { // https://developers.google.com/youtube/player_parameters\n                autoplay: 1,\n               // listType: 'radio',\n                list: 'PLmS86t_jmQvbpeehASz2Tosvj7d1VN-ZE',\n                playsinline: 1,\n                cc_load_policy: 1,\n                modestbranding: 1,\n                index: 10,\n                controls: 0\n            }\n            }\n        };\n        this.onSelectImage = this.onSelectImage.bind(this);\n        this.onTakePhotoAnimationDone = this.onTakePhotoAnimationDone.bind(this);\n        this.getAgeAndEmotion = this.getAgeAndEmotion.bind(this);\n        this.getRecs = this.getRecs.bind(this);\n        this.getMusicYearFromAge = this.getMusicYearFromAge.bind(this);\n        this.isThisEmotionHappy = this.isThisEmotionHappy.bind(this);\n        this.getPlaylistFromParams = this.getPlaylistFromParams.bind(this);\n        this.getBackgroundImage = this.getBackgroundImage.bind(this);\n    }\n\n    onTakePhotoAnimationDone(dataUri) {\n        this.setState({dataUri: dataUri, loading: true});\n\n        Promise.all([this.getAgeAndEmotion()])\n            .then(([[age, emotion]]) => {\n                this.setState({age: age, emotion: emotion});\n                this.getRecs();\n            })\n            .catch(err => this.getRecs())\n            .then(() => {\n                Promise.all([this.getBackgroundImage()])\n                    .then(([backgroundImage]) => {\n                        this.setState({backgroundImage: backgroundImage, loading: false, loadSong: true});\n                    })\n                    .catch(function () {\n                        console.log('backgroundImage promise err')\n                    });\n            })\n    }\n\n    onSelectImage() {\n        //this.setState({loading: true});\n        // Analzye & make calls\n        this.setState({\n            loadSong: true\n        });\n    }\n\n    getAgeAndEmotion() {\n        return new Promise((resolve, reject) => {\n            var age = -1;\n            var emotion = null;\n            const azureSubscriptionKey = this.state.azureKey;\n            const uri = \"https://southcentralus.api.cognitive.microsoft.com/face/v1.0/detect?returnFaceId=false&returnFaceLandmarks=false&returnFaceAttributes=age,emotion\"\n            var buff = new Buffer(this.state.dataUri.replace(/^data:image\\/(png|gif|jpeg);base64,/, ''), 'base64');\n\n            fetch(uri, {\n                method: 'post',\n                body: buff,\n                headers: {\n                    'Content-Type': 'application/octet-stream',\n                    'Ocp-Apim-Subscription-Key': azureSubscriptionKey,\n                }\n            })\n                .then((res) => res.json())\n                .then(function (jsonData) {\n                    console.log(jsonData);\n                    if (jsonData.length > 0) {\n                        //get the first face we found\n                        age = jsonData[0].faceAttributes.age;\n                        emotion = jsonData[0].faceAttributes.emotion;\n                        console.log(\"Azure: age = \" + age);\n                        console.log(\"Azure: emotion = \" + emotion);\n                        resolve([age, emotion]);\n                    } else {\n                        console.log(\"NO FACES FOUND\");\n                        reject();\n                    }\n                })\n                .catch(function () {\n                    console.log(\"got her\");\n                    reject();\n                });\n        })\n    }\n\n    /* Given the age of someone, get the music decade they are most likely to recognize */\n    getMusicYearFromAge(age) {\n        //handle error case\n        if(age < 0) {\n            return age;\n        }\n\n        var d = new Date();\n        var currentYear = d.getFullYear();\n\n        /* Get the exact music year  */\n        var tmpMusicYear = currentYear - age + 10;\n        var leastSignificantDigitOfMusicYear = tmpMusicYear % 10;\n\n        /* Get the music year at a flat decade */\n        var musicYear = tmpMusicYear - leastSignificantDigitOfMusicYear;\n\n        /* if the were born in the second half of the music year, suggest music from the next decade */\n        if (leastSignificantDigitOfMusicYear >= 5) {\n            musicYear += 10;\n        }\n\n        //handle edge cases\n        if (musicYear < 1950) {\n            musicYear = 1950;\n        } else if (musicYear > 2010) {\n            musicYear = 2010;\n        }\n\n        return musicYear;\n    }\n\n    /* If the happy emotion confidence is greater than the sad emotion confidence, return true */\n    isThisEmotionHappy(emotion) {\n        //handle error edge case\n        if(emotion == null) {\n            console.log(\"emotion was null\");\n            console.log(emotion);\n            return true;\n        }\n\n        var happyConf = emotion.happiness;\n        var sadConf = emotion.sadness;\n\n        console.log(\"happy:\" + happyConf);\n        console.log(\"sad:\" + sadConf);\n\n        if (sadConf > happyConf) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    getPlaylistFromParams(musicYear, isHappy) {\n        switch (musicYear) {\n            case 1950:\n                if(isHappy){\n                    return \"PLNDhBcjuPp0-UCSML4DxFqqc5WN4aGcW1\";\n                }\n                else {\n                    return \"PLjLPKGJvC8TuhpLXMhskQUaC26zSBjCsM\";\n                }\n            case 1960:\n                if(isHappy){\n                    return \"PLPKXtd2AJvNkaZgrb0yK3UoQk7487TceH\";\n                }\n                else {\n                    return \"PLAZH8pP5KBzXiSfcH_2GgoDeXjtTUF3sM\";\n                }\n            case 1970:\n                if(isHappy){\n                    return \"PL9QL1AvNabH5u2gfi48VogStrPUY_LijY\";\n                }\n                else {\n                    return \"PLjyiHjKMhSuK-rChCn2Xl4RNfUcUhx-qA\";\n                }\n            case 1980:\n                if(isHappy){\n                    return \"PL857_Yj5tf8cek2iOFyZBE9XSOLOhW-0m\";\n                }\n                else {\n                    return \"PLT_7RtTUm0XwsUHTCuQog7xknmMCuvr4B\";\n                }\n            case 1990:\n                if(isHappy){\n                    return \"PLLWfa8Ng-FdBamt3JCTadmbdd9UtLFZ7K\";\n                }\n                else {\n                    return \"PLu1jpc624xfKGhWItKFNRPu7QylkwS-OR\";\n                }\n            case 2000:\n                if(isHappy){\n                    return \"PLPf_PZG3-WAGq4tgjU6m87Ksndn2Jz2OF\";\n                }\n                else {\n                    return \"PLIWqGUaiQxN7kL47fzQ87h0OlTaCyr8-o\";\n                }\n            case 2010:\n                if(isHappy){\n                    return 'RDQMU2NvmEhYGhM';\n                }\n                else {\n                    return \"RDAMVM3AtDnEC4zak\";\n                }\n            default:\n                return \"PL0B2BFACC0574C36F\";\n        }\n    }\n\n    getBackgroundImage() {\n        const FLICKR_API_KEY = '04d08e66c3f35b0d3223494098bf28bb';\n        var isHappy = this.state.emotion.happiness > this.state.emotion.sadness;\n        var flickr = new Flickr(FLICKR_API_KEY);\n        var backgroundImage = 'https://live.staticflickr.com/1732/42648827301_8879542e48_k.jpg';\n        var text = 'city calm';\n\n        if (isHappy) {\n            text = 'nature happy';\n        }\n\n        return new Promise((resolve, reject) => {\n                flickr.photos.search({\n                text: text,\n                safe_search: '1',\n                license: '1,2,3,4,5,6',\n                content_type: '1',\n                extras: 'url_l'\n            })\n                .then((res) => {\n                    backgroundImage = res.body['photos']['photo'][Math.floor((Math.random() * 50))]['url_l']; // TODO: err handling on this parse\n                    resolve(backgroundImage);\n                })\n                .catch(function () {\n                    console.error('Error searching flickr photos');\n                    reject();\n                });\n        })\n\n\n\n    }\n\n    getRecs() {\n        var age = this.state.age;\n        var emotion = this.state.emotion;\n        var opts = this.state.opts;\n        //get the playlistId\n        var musicYear = this.getMusicYearFromAge(age);\n        var isHappy = this.isThisEmotionHappy(emotion);\n        opts.playerVars.list = this.getPlaylistFromParams(musicYear, isHappy);\n        opts.playerVars.index = Math.floor((Math.random() * 10) + 1)\n        // set recs\n        this.setState({opts: opts, isHappy: isHappy});\n    }\n\n\n    render() {\n        const instPopover = (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\">Instructions</Popover.Title>\n                <Popover.Content>\n                    Use the webcam box below to snap a picture of yourself! Press the <strong>white round circle</strong> to take the picture.\n                    If the webcam can't find your face, it will play a random video.\n                </Popover.Content>\n            </Popover>\n        );\n\n         if (this.state.loadSong) {\n            return (\n                <div>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand href=\"/final-project/\">\n                            <img\n                                alt=\"\"\n                                src=\"/logo.png\"\n                                width=\"30\"\n                                height=\"30\"\n                                className=\"d-inline-block align-top\"\n                            />{' '}\n                            <strong>MusicFace</strong>\n                        </Navbar.Brand>\n                    </Navbar>\n                <div id=\"app\" style={{backgroundImage: `url(${this.state.backgroundImage})`, backgroundSize: '100% 100%', justifyContent: 'center', alignItems: 'center'}}>\n\n\n                     <br/>\n                     <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '93vh'}}>\n                        <YouTube\n                        any    opts={this.state.opts}\n                        />\n                     </div>\n                </div>\n                </div>)\n        } else {\n            return (\n                <div className=\"App\">\n\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand href=\"/final-project/\">\n                            <img\n                                alt=\"\"\n                                src=\"/logo.png\"\n                                width=\"30\"\n                                height=\"30\"\n                                className=\"d-inline-block align-top\"\n                            />{' '}\n                            <strong>MusicFace</strong>\n                        </Navbar.Brand>\n                        <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={instPopover} className=\"mr-sm-2\">\n                            <Button variant=\"success\">Instructions</Button>\n                        </OverlayTrigger>\n                    </Navbar>\n\n                    {\n                        (this.state.loading)\n                            ? <LoadingOverlay active={true} spinner = {<ClipLoader sizeUnit={\"px\"} size={100} color={'#36d7b7'} loading={true}/>}>\n                                    <ImagePreview isFullscreen={false} dataUri={this.state.dataUri} /></LoadingOverlay>\n                            : <Camera onTakePhotoAnimationDone={this.onTakePhotoAnimationDone}/>\n                    }\n                </div>\n            );\n        }\n    }\n}\n\nApp.defaultProps = {\n    \"emotion\": {\n        \"anger\": 0,\n        \"contempt\": 0,\n        \"disgust\": 0.001,\n        \"fear\": 0,\n        \"happiness\": 0.989,\n        \"neutral\": 0.009,\n        \"sadness\": 0,\n        \"surprise\": 0\n    }\n};\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles/imagePreview.css';\n\nexport const ImagePreview = ({ dataUri, isFullscreen }) => {\n  let classNameFullscreen = isFullscreen ? 'demo-image-preview-fullscreen' : '';\n\n  return (\n    <div className={'demo-image-preview ' + classNameFullscreen}>\n      <img src={dataUri} />\n    </div>\n  );\n};\n\nImagePreview.propTypes = {\n  dataUri: PropTypes.string,\n  isFullscreen: PropTypes.bool\n};\n\nexport default ImagePreview;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}