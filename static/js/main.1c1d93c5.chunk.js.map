{"version":3,"sources":["ImagePreview/index.js","App.js","serviceWorker.js","index.js"],"names":["ImagePreview","dataUri","classNameFullscreen","isFullscreen","className","src","App","props","context","state","loading","emotions","age","loadSong","playlistId","onSelectImage","bind","onTakePhotoAnimationDone","getAge","getEmotions","getRecs","this","setState","tmpMusicYear","Date","getFullYear","leastSignificantDigitOfMusicYear","musicYear","emotion","happyConf","sadConf","forEach","item","index","label","localeCompare","confidence","isHappy","getMusicYearFromAge","isThisEmotionHappy","getPlaylistFromParams","style","display","justifyContent","alignItems","height","sizeUnit","size","color","YouTube","videoId","opts","width","playerVars","autoplay","active","spinner","Navbar","bg","variant","sticky","Button","onClick","React","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c1d93c5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles/imagePreview.css';\n\nexport const ImagePreview = ({ dataUri, isFullscreen }) => {\n  let classNameFullscreen = isFullscreen ? 'demo-image-preview-fullscreen' : '';\n\n  return (\n    <div className={'demo-image-preview ' + classNameFullscreen}>\n      <img src={dataUri} />\n    </div>\n  );\n};\n\nImagePreview.propTypes = {\n  dataUri: PropTypes.string,\n  isFullscreen: PropTypes.bool\n};\n\nexport default ImagePreview;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Camera from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\nimport YouTube from 'react-youtube';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport LoadingOverlay from 'react-loading-overlay'\nimport ImagePreview from './ImagePreview';\nimport Button from 'react-bootstrap/Button';\nimport Navbar from 'react-bootstrap/Navbar';\n\nclass App extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            dataUri: null,\n            loading: false,\n            emotions: this.props.emotions,\n            age: 20,\n            loadSong: false,\n            playlistId: \"\",\n        };\n        this.onSelectImage = this.onSelectImage.bind(this);\n        this.onTakePhotoAnimationDone = this.onTakePhotoAnimationDone.bind(this);\n        this.getAge = this.getAge(this);\n        this.getEmotions = this.getEmotions(this);\n        this.getRecs = this.getRecs(this);\n    }\n\n    onTakePhotoAnimationDone(dataUri) {\n        this.setState({dataUri, loading: true});\n        this.getAge();\n        this.getEmotions();\n        this.getRecs();\n        //this.setState({loading: false, loadSong: true})\n\n    }\n\n    onSelectImage() {\n        //this.setState({loading: true});\n        // Analzye & make calls\n        this.setState({\n            loadSong: true\n        });\n    }\n\n    getAge() {\n        var age = this.state.age;\n\n        //Call api here, change age\n\n        this.setState({age: age});\n    }\n\n    getEmotions() {\n        var emotions = this.state.emotions;\n\n\n        // Call api here, change emotions\n        this.setState({emotions: emotions});\n\n    }\n\n    /* Given the age of someone, get the music decade they are most likely to recognize */\n    getMusicYearFromAge(age) {\n        var d = new Date();\n        var currentYear = d.getFullYear();\n\n        /* Get the exact music year  */\n        var tmpMusicYear = currentYear - age + 10;\n        var leastSignificantDigitOfMusicYear = tmpMusicYear % 10;\n\n        /* Get the music year at a flat decade */\n        var musicYear = tmpMusicYear - leastSignificantDigitOfMusicYear;\n\n        /* if the were born in the second half of the music year, suggest music from the next decade */\n        if (leastSignificantDigitOfMusicYear >= 5) {\n            musicYear += 10;\n        }\n\n        //handle edge cases\n        if (musicYear < 1950) {\n            musicYear = 1950;\n        } else if (musicYear > 2010) {\n            musicYear = 2010;\n        }\n\n        return musicYear;\n    }\n\n    /* If the happy emotion confidence is greater than the sad emotion confidence, return true */\n    isThisEmotionHappy(emotion) {\n        var happyConf = 0.0;\n        var sadConf = 0.0;\n\n        emotion.forEach(function (item, index) {\n            if (item.label.localeCompare(\"happy\") === 0) {\n                happyConf = item.confidence;\n            } else if (item.label.localeCompare(\"sad\") === 0) {\n                sadConf = item.confidence;\n            }\n        });\n\n        if (sadConf > happyConf) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    getPlaylistFromParams(musicYear, isHappy) {\n        switch (musicYear) {\n            case 1950:\n                if(isHappy){\n                    return \"PLNDhBcjuPp0-UCSML4DxFqqc5WN4aGcW1\";\n                }\n                else {\n                    return \"PLjLPKGJvC8TuhpLXMhskQUaC26zSBjCsM\";\n                }\n            case 1960:\n                if(isHappy){\n                    return \"PLPKXtd2AJvNkaZgrb0yK3UoQk7487TceH\";\n                }\n                else {\n                    return \"PLAZH8pP5KBzXiSfcH_2GgoDeXjtTUF3sM\";\n                }\n            case 1970:\n                if(isHappy){\n                    return \"PL9QL1AvNabH5u2gfi48VogStrPUY_LijY\";\n                }\n                else {\n                    return \"PLjyiHjKMhSuK-rChCn2Xl4RNfUcUhx-qA\";\n                }\n            case 1980:\n                if(isHappy){\n                    return \"PL857_Yj5tf8cek2iOFyZBE9XSOLOhW-0m\";\n                }\n                else {\n                    return \"PLT_7RtTUm0XwsUHTCuQog7xknmMCuvr4B\";\n                }\n            case 1990:\n                if(isHappy){\n                    return \"PLLWfa8Ng-FdBamt3JCTadmbdd9UtLFZ7K\";\n                }\n                else {\n                    return \"PLu1jpc624xfKGhWItKFNRPu7QylkwS-OR\";\n                }\n            case 2000:\n                if(isHappy){\n                    return \"PLPf_PZG3-WAGq4tgjU6m87Ksndn2Jz2OF\";\n                }\n                else {\n                    return \"PLIWqGUaiQxN7kL47fzQ87h0OlTaCyr8-o\";\n                }\n            case 2010:\n                if(isHappy){\n                    return \"PLeZgwVkN7bbfVLcqnz9l5RjASqUkBtpBe\";\n                }\n                else {\n                    return \"PL5D7fjEEs5yflZzSZAhxfgQmN6C_6UJ1W\";\n                }\n            default:\n                return \"Invalid year! No playlist id generated\";\n        }\n    }\n\n    getRecs() {\n        var age = this.state.age;\n        var emotions = this.state.emotions;\n        var playlistId = this.state.playlistId;\n\n        //get the playlistId\n        var musicYear = this.getMusicYearFromAge(age);\n        var isHappy = this.isThisEmotionHappy(emotions);\n        playlistId = this.getPlaylistFromParams(musicYear, isHappy);\n\n        // set recs\n        this.setState({playlistId: playlistId});\n    }\n\n\n    render() {\n        const opts = {\n            height: '390',\n            width: '640',\n            playerVars: { // https://developers.google.com/youtube/player_parameters\n                autoplay: 1\n            }\n        };\n        if (this.state.loading) {\n            return (<div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh'}}>\n                <ClipLoader sizeUnit={\"px\"} size={100} color={'#36d7b7'} loading={this.state.loading}/>\n            </div>)\n        } else if (this.state.loadSong) {\n            return (\n                <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh'}}>\n                    <YouTube\n                        videoId=\"dQw4w9WgXcQ\"\n                        opts={opts}\n                    />\n                </div>)\n        } else {\n            return (\n\n                <div className=\"App\">\n                    {\n                        (this.state.loading)\n                            ? <LoadingOverlay active={true} spinner = {<ClipLoader sizeUnit={\"px\"} size={100} color={'#36d7b7'} loading={true}/>}                                        >\n                                    <p><ImagePreview isFullscreen={true} dataUri={this.state.dataUri} /> </p></LoadingOverlay>\n                            : <Camera onTakePhotoAnimationDone={this.onTakePhotoAnimationDone}/>\n                    }\n                    <div>\n                        <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n                            <Button variant=\"primary\" onClick={this.onSelectImage}>Get Recommendation</Button>\n                        </Navbar>\n                    </div>\n\n                </div>\n            );\n        }\n    }\n}\n\nApp.defaultProps = {\n    \"emotions\": ([\n        {\n            \"confidence\": 0.9386989,\n            \"label\": \"Happy\"\n        },\n        {\n            \"confidence\": 0.0483937,\n            \"label\": \"Neutral\"\n        },\n        {\n            \"confidence\": 0.0120008,\n            \"label\": \"Disgust\"\n        },\n        {\n            \"confidence\": 0.000406,\n            \"label\": \"Sad\"\n        },\n        {\n            \"confidence\": 0.0003461,\n            \"label\": \"Fear\"\n        },\n        {\n            \"confidence\": 0.00015,\n            \"label\": \"Angry\"\n        },\n        {\n            \"confidence\": 0.0000046,\n            \"label\": \"Surprise\"\n        }\n    ])\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}